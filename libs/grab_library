# TAGS
#   grab_library
#   v7.3
# AUTHOR
#   ngadimin@warnet-ersa.net
# TL;DR
#   don't change unless you know what you're doing
#   intended for use by other scripts, not to be executed directly.
#   see README and LICENSE
# shellcheck disable=SC2034,SC2059,SC2148,SC2154

shopt -s expand_aliases
alias _grp="LC_ALL=C grep"
alias _snc="rsync -rtxX -e 'ssh -q -T -c aes128-ctr -o Compression=no -x'"
alias _sed="LC_ALL=C sed"
alias _srt="LC_ALL=C sort --buffer-size=80% --parallel=3"
alias _ssh="ssh -q -T -c aes128-ctr -o Compression=no -x"

_fkt="$(faketime -f "+5m" date +%H:%M:%S) $(date | awk -F' ' '{print $6}')"
_foo="${0##*/}"
_fuu="${BASH_SOURCE[0]##*/}"
_prl='^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$'
_ver=$(grep -P "^#\s{1,}v.*" "${_foo}" | cut -d' ' -f4)
_ori="https://raw.githubusercontent.com/ngadmini/Grabbing-Blacklist-for-Bind9-RPZ/${_ver}"
printf -v _lct "%s %s" "$(date +%Y-%m-%d\ %T)" "$(date | awk -F' ' '{print $6}')"

# colorizing
_cyn='\e[96m'; _grn='\e[92m'; _ncl='\e[0m'; _red='\e[91m'; _ylw='\e[93m'
_err="${_red}[FAIL]${_ncl}"; _hnt="${_cyn}[HINT]${_ncl}"; _inf="${_ylw}[INFO]${_ncl}"
_CYN="${_cyn}%s${_ncl}"; _GRN="${_grn}%s${_ncl}"; _RED="${_red}%s${_ncl}"; _YLW="${_ylw}%s${_ncl}"
_ccl="${_grn}'Ctrl C'${_ncl}"
_cnt="${_cyn}CONTINUED to :${_ncl}"
_pre="${_ylw}PREPARING TASKs:${_ncl}"
_rnr="${_grn}'rndc reload'${_ncl}"
_shd="${_grn}'shutdown -c'${_ncl}"
_tks="${_red}TASKs${_ncl}"
_wn0="${_grn}WARNING:${_ncl}"; _wn1="${_red}[WARN]${_ncl}"

f_tmp() {   # remove temporary files, directories & arrays, generated while script execution
   find . -maxdepth 1 -regex "^.*\(sed\|dmn\|tm[pqr]\|txt.adulta\).*\|.*gz$" -print0 | xargs -0 -r rm -rf
   find . -maxdepth 1 -type d ! -name "." -print0 | xargs -0 -r rm -rf
   find /tmp -maxdepth 1 -type f -name "txt.*" -print0 | xargs -r0 mv -t .
}
f_cln() { printf "\n"; f_tmp; f_set; }
f_trp() { trap f_cln EXIT TERM; trap 'f_cln; exit 130' INT; }
f_set() {
   unset -v ar_{CAT,CNF,DBC,RPZ,VAR,cat,cnf,dbc,dom,dmn,dwn,exe,num,reg,rpz,shn,sho,shy,spl,tmp,txt,url,zon}
   set +Eeuo pipefail; shopt -u expand_aliases
}

f_xcd() {   # exit code {244..255}
   for EC in $1; do
      local _xcd; _xcd=$(printf "${_err} ${_foo} line ${BASH_LINENO[0]}. exit %s" "${EC}")
      local _xcl; _xcl=$(printf "${_err} ${_fuu} line ${BASH_LINENO[0]}. exit %s" "${EC}")
      case ${EC} in
        244) printf "\n%s: \n${_hnt} %s\n" "${_xcd}" "required passwordless ssh to remote host: '$2'"; return 1;;
        245) printf "\n%s: \n${_hnt} %s\n" "${_xcd}" "required '$2' but it's not installed"; return 1;;
        246) printf "\n%s: \n${_hnt} %s\n" "${_xcd}" "'$2' required '$3' but it's not installed"; return 1;;
        247) printf "\n%s: \n${_hnt} %s\n" "${_xcd}" "you must execute ${_foo} as non-root privileges"; return 1;;
        248) local _msj; _msj="urls. it should consist of ${ar_num[ar_url]} urls"
             local _lmm; _lmm="$(basename "$2"): $(wc -l < "$2")"
             printf "\n%s\n%s\n" "${_xcd}" "${_lmm} ${_msj}"; return 1;;
        249) local _msg; _msg="lines. it should consist of ${ar_num[ar_reg]} lines"
             local _lnn; _lnn="$(basename "$2"): $(wc -l < "$2")"
             printf "\n%s\n%s\n" "${_xcd}" "${_lnn} ${_msg}"; return 1;;
        250) local _re0='[curl-code] https://curl.se/docs/manpage.html'
             local _re1='[stat-code] https://en.wikipedia.org/wiki/List_of_HTTP_status_codes'
             local _unk='check if there is a typo in grab_urls. if spelling is correct, please see'
             printf "${_inf} %s:\n%s\n%s\n%s\n" "${_unk}" "${_re1}" "${_re0}" "${_xcl}"; exit 1;;
        251) printf "\n%s\n%s\n" "${_xcd}" "download failed from origin, please check spelling"; return 1;;
        252) local _ind; printf -v _ind "${_CYN}" "$(echo "${ar_num[*]}" | _grp '[aA-zZ\.,]')"
             printf "\n%s, invalid ar_num's values: %s" "${_xcd}" "${_ind}"
             printf "\n${_hnt} use numeric in ar_num's values%s\n"; return 1;;
        253) local _lin; _lin=$(grep -En "^(HOST|#HOST)" "${CNF}" | cut -d: -f1)
             local _ext; _ext=$(printf "\n${_err} ${CNF##*/} at line ${_lin}. exit %s" "${EC}")
             printf "%s\n%s : if spelling is correct, maybe isDOWN\n" "${_ext}" "${HOST}"; return 1;;
        254) printf "\n%s: ${_CYN} doesn't exis in %s\n" "${_xcl}" "$(basename "$2")" "$3"; return 1;;
        255) printf "\n%s: FOUND files:\n${_CYN}\n" "${_xcl}" "$2"; return 1;;
          *) local _ukn; _ukn="Unknown exit code [f_xcd $1], please check"
             local _ukm; printf -v _ukm "%s" "${_foo} at line $(grep -n "f_xcd $1" "${_foo}" | cut -d: -f1)"
             printf "\n${_err} %s %s\n" "${_ukn}" "${_ukm}"; return 1;;
      esac
   done
}

f_sm0() {   # display messages while getting options
   printf "${_CYN}\n" "CHOOSE one of the following options :"
   printf "%4s) eliminating duplicate entries between CATEGORY\n" "1"
   printf "%4s) option [1] and rewriting all CATEGORIES to RPZ format [db.* files]\n" "2"
   printf "%4s) options [1,2] and incrementing serial zone-files [rpz.*]\n" "3"
   printf "%4s) options [1,2,3] and syncronizing latest [rpz.* and db.*] files to %s\n" "4" "$1"
   if [[ ${RNDC_RELOAD} =~ [nN][oO] ]]; then
      printf "%6s${_wn0} remote-host: %s will REBOOT due to low memory\n" "" "${HOST}"
      printf "%18s ${_shd} at remote-host: %s to abort\n" "use" "${HOST}"
   else
      printf "%6s${_wn0} ${_rnr} will be executed too.\n" ""
   fi
   printf "%4s) use ${_ccl} to quit\n" "^C"
   printf "ENTER: ${_CYN} or ${_ccl} to quit\n" "[1|2|3|4]"
}

f_sm1() {   # f_sm[1..5]: display messages while chosing option
   printf "\n${_red}[%s'st] TASK options chosen${_ncl}\n" "${opsi}"
   printf "${_cnt} 1) eliminating duplicate entries between CATEGORY\n"
   f_smb "st"
}

f_sm2() { f_sm5 "nd"; f_smb "nd"; }
f_sm3() { f_sm5 "th"; printf "%30s serial at zone-files [rpz.*]\n" "2) incrementing"; f_smb "th"; }

f_sm4() {
   f_sm5 "th"
   printf "%30s serial zone-files [rpz.*]\n" "3) incrementing"
   printf "%30s latest [rpz.* and db.*] files to %s\n" "4) syncronizing" "${HOST}"
   if [[ ${RNDC_RELOAD} =~ [nN][oO] ]]; then
      printf "%6s${_wn0} remote-host: %s will REBOOT due to low memory\n" "" "${HOST}"
      printf "%18s ${_shd} at remote-host: %s to abort\n" "use" "${HOST}"
   else
      printf "%6s${_wn0} ${_rnr} will be executed too. press ${_ccl} to abort\n" ""
   fi
   f_smb "th"
}

f_sm5() {
   printf "\n${_red}[%s'%s] TASK options chosen${_ncl}\n" "${opsi}" "$1"
   printf "${_cnt} 1) eliminating duplicate entries between CATEGORY\n"
   printf "%27s all CATEGORIES to RPZ format [db.* files]\n" "2) rewriting"
}

f_sm6() {   # display FINISH messages
   printf "${_wn1} there are still remaining duplicate entries between CATEGORIES\n"
   printf "${_hnt} consider continue to next TASKs\n"
}

# f_sm[7..11]: display processing messages
f_sm7() { printf "%12s: %-66s" "grab_$1" "${2##htt*\/\/}"; }
f_sm8() { printf "\nprocessing ${_CYN} with (%d) additional remote-files\n" "${1^^} CATEGORY" "$2"; }
f_sm9() { printf "%12s: %-66s" "fixing" "bads, duplicates and false entries at ${1^^}"; }
f_sma() { printf "\n${_tks} based on %s'%s options: ${_GRN}\n" "${opsi}" "$1" "DONE"; }
f_smb() { printf "${_cyn}Performing tasks based on %s'%s options ...${_ncl}\n" "${opsi}" "$1"; }

f_tim() { # time elapsed in Minute:Second.milisecond
   local S="$((T/1000000000))"; local MS="$((T%1000000000/1000000))"
   printf "${_inf} completed IN ${_cyn}%'dm:%'ds:%'dms${_ncl}\n" "$((S/60%60))" "$((S%60))" "${MS}"
}

f_up() { printf "${_GRN}\n" "isUP"; }
f_ok() { printf "${_GRN}\n" "isOK"; }
f_do() { printf "${_GRN}\n" "DONE"; }
f_no() { printf "\n${_err} ${_RED} ${_CYN}\n" "noFOUND:" "$1"; }

# grabbing raw-domains && fixing false and bad entries
f_add() { curl --retry 5 --retry-all-errors -f -s "$1" || f_xcd 251 "$1"; }
f_fix() { f_sm9 "$1"; _srt -u "$2" | _sed -e "$3" -e "$4" > "$5"; f_do; }
f_ipv() {
   _grp -P "${_prl}" "$1" | _sed -r "/\/[0-9]\{2\}$/ ! s/$/\/32/" >> "$2"
   _sed -i -r "/^([0-9]{1,3}\.){3}[0-9]{1,3}$/d" "$1"
}

f_fip() {   # capture ip-address entry. save it into sub-net [pv4 CATEGORY]
   printf "%12s: %-66s" "moving" "IP-address entries into $3 CATEGORY"
   f_ipv "$@"; f_do
   printf "%12s: %'d entries.\n" "acquired" "$(wc -l < "$1")"
}

f_crw() {   # verify remote-urls [grab_urls] is available
   ar_sho=(); local ar_dwn=(); local i=-1
   while read -r line; do
      # slicing urls && add as an element to ${ar_sho[@]}
      local lll; lll="${line##htt*\/\/}"
      local ll; ll="$(basename "${line}")"
      local l; l="${lll/\/*/}"
      local _url; _url="${l}/..?../${ll}"
      ar_sho+=("${_url}"); ((i++))
      printf "%12s: %-66s" "urls_${i}" "${ar_sho[i]}"
      local _stc; _stc=$(curl -so /dev/null -Iw "%{http_code}" "${line}")
      _ret=$?

      if ! [[ ${_stc} =~ ^[02].* ]]; then
          printf "${_RED}\n" "stat-code: ${_stc}"
          ar_dwn+=("[stat-code: ${_stc}] ${line}")
      elif [[ ${_ret} = 6 ]]; then
          printf "${_RED}\n" "curl-code: ${_ret}"
          ar_dwn+=("[curl-code: ${_ret}]   ${line}")
      else
         f_up
      fi
   done < "$1"
   # display result
   if [[ ${#ar_dwn[@]} -eq 0 ]]; then
      printf "%30s\n" " " | tr " " -; printf "%s\n" "All URLS of remote-files isUP."
   else
      printf "%84s\n" " " | tr " " -; printf "${_CYN}\n" "${ar_dwn[@]}"; f_xcd 250
   fi
}

f_dpl() { printf "eliminating duplicate entries based on ${_CYN}\n" "${1^^}"; }
f_dpm() { awk 'FILENAME == ARGV[1] && FNR==NR{a[$1];next} !($1 in a)' "$1" "$2" | _srt > "$3"; }
f_dpn() {   # [and above] used by grab_duplic.sh
   printf "%11s = deduplicating %-28s" "STEP $6.$1" "$2 entries"
   _srt "$3" "$4" | uniq -d | _srt -u > "$5"
}

f_g4c() {   # used by grab_cereal.sh
   if [[ $(grep -n "^; generate at" "$1" | cut -d: -f1) = 1 ]]; then
      _sed -i "1s/^.*$/; generate at ${_lct} by ${_foo} ${_ver}/" "$1"
   else
      _sed -i "1i ; generate at ${_lct} by ${_foo} ${_ver}" "$1"
   fi
}

f_g4b() {   # nested in f_rpz and f_ip4
   _sed -i "1i ; generate at ${_lct} by ${_foo} ${_ver}\n;" "$1"
   local acq_al; printf -v acq_al "%'d" "$(wc -l < "$1")"
   printf "%10s entries\n" "${acq_al}"
}

f_rpz() {   # used by grab_build.sh [configurable in grab_config]
   printf "%13s %-31s : " "rewriting" "$2 to $1"
   awk -v DOM="${RPZ_DOM}" '{print $0" "DOM"\n""*."$0" "DOM}' "$2" >> "$1"
   f_g4b "$@"
}

f_ip4() {   # used by grab_build.sh [configurable in grab_config]
   printf "%13s %-31s : " "rewriting" "$2 to $1"
   _sed "s/\//\./" "$2" | awk -v IPV="${RPZ_IPV}" -F. '{print $5"."$4"."$3"."$2"."$1"."IPV}' >> "$1"
   f_g4b "$@"
}

f_ssh() {   # nested in f_cer and needed by grab_rsync
   printf "${_inf} %-85s" "check availability remote-host: ${HOST}"
   if ! ping -w 1 "${HOST}" >> /dev/null 2>&1; then f_xcd 253; fi; f_up

   printf "${_inf} %-85s" "check passwordless ssh compatibility: ${HOST}"
   _ssh -o BatchMode=yes "${HOST}" true  >> /dev/null 2>&1 || f_xcd 244 "${HOST}"; f_ok

   printf "${_inf} %-85s" "check availability: ${ZONE_DIR} in ${HOST}"
   _ssh root@"${HOST}" [[ -d "${ZONE_DIR}" ]] || f_xcd 254 "${ZONE_DIR}" "${HOST}"; f_ok

   printf "${_inf} %-85s" "check required debian-packages in ${HOST}"
   for C in {rsync,pigz}; do   # require: rsync and pigz
      _ssh root@"${HOST}" "hash ${C} >> /dev/null 2>&1" || f_xcd 246 "${HOST}" "${C}"
   done; f_ok
}

f_cer() {   # used by grab_cereal.sh [grabbing zone-files if notFOUND]
   f_ssh
   for a in $1; do
      if scp root@"${HOST}":"${ZONE_DIR}"/"${a}" "${_DIR}" >> /dev/null 2>&1; then
         printf "${_inf} succeed get ${_CYN} from %s\n" "${a}" "${HOST}"
      else
         printf "\n${_err} ${_CYN} not found in %s\n" "${a}" "${HOST}"
         f_ori "zones-rpz/${a}" "${a}"
      fi
   done
   printf "\n${_inf} retry to forking ${_CYN} again" "${_foo}"
   exec "$0"
}

f_ori() {
   printf "${_inf} trying to get ${_CYN} from origin:\n%s\n" "$2" "${_ori}/$1"
   local _val; _val=$(curl -so /dev/null -I -w "%{http_code}" "${_ori}/$1")
   if [[ ${_val} -eq 200 ]]; then
      curl -fs "${_ori}/$1" >> "$2" || f_xcd 251
      printf "${_inf} %-73s" "get $2 from origin"
   else
      printf "${_err} ${_CYN} notFOUND. download failed: status-code %d\n" "$2" "${_val}"
      return 1
   fi
}

f_mis() { printf "\n${_err} misMATCH file: ${_CYN}" "$1"; f_xcd 255 "$2"; }
f_sed() { _sed "s/ /\n/g" | sort | uniq -u | tr "\n" " " | _sed "s/ $//g"; }
f_fnd() { find . -maxdepth 1 -type f -name "$1" | _sed -r "s/\.\///" | sort; }
f_frm() { find . -maxdepth 1 -type f -name "$1" -print0 | xargs -0 -r rm; }
f_cat() { find . -maxdepth 1 -type d | _sed -r "1d;s/\.\///" | sort; }
f_sta() { if [[ $(stat -L -c "%a" "$2") != "$1" ]]; then chmod "$1" "$2"; fi; }
f_stt() {
   printf "\n${_RED}\nstarting ${0##*/} ${_ver} at ${_CYN}" "$1" "${_lct}"
   [[ ! ${UID} -eq 0 ]] || f_xcd 247
}

f_dft() {   # variable: define default values
   printf "${_inf} forking ${_CYN} with default configurations:\n" "${_foo}"
   : "${HOST:=rpz.warnet-ersa.net}"         # or ip-address
   : "${RNDC_RELOAD:=no}"                   # yes OR no
   : "${RPZ_DOM:=CNAME .}"                  # rpz policy
   : "${RPZ_IPV:=rpz-nsip CNAME .}"         #
   : "${ZONE_DIR:=/etc/bind/zones-rpz}"     # target dir
}

f_cnf() {   # valuation variables in grab_config
   readonly CNF="${_DIR}"/grab_config
   local _ptr="s/=[ ^ ]/=/g;s/CNAME\(\t\|\s.*\)\./CNAME ./g;s/['\"#]//g;s/\( \|\t\)\{2,\}.*//g;s/\. [a0-z9].*/\./g"
   if [[ -e ${CNF} ]]; then
      f_sta 644 "${CNF}"
      ar_cnf=(HOST RNDC_RELOAD RPZ_DOM RPZ_IPV ZONE_DIR)
      mapfile -t ar_CNF < <(_grp -E "^[A-Z]" "${CNF}" | _sed -r "s/[ ^ ]=/=/g" | cut -d= -f1 | sort)
      if [[ ${ar_CNF[*]} == "${ar_cnf[*]}" ]]; then   # get values supplied by "${CNF}", instead of "source ${CNF}"
         mapfile -t ar_VAR < <(_grp -E "^[A-Z]" "${CNF}" | _sed -r "${_ptr}" | sort | cut -d= -f2)
         for ARG in "${!ar_VAR[@]}"; do
            printf -v "${ar_CNF[ARG]}" "%s" "${ar_VAR[ARG]}"
         done
      else   # misconfigurations occurs: fallback to default values
         printf "\n${_wn1} misconfigurations occurs in %s. undefine value:\n" "${CNF##*/}"
         printf "%9s%s\n" "" "$(echo "${ar_CNF[@]}" "${ar_cnf[@]}" | f_sed)"
         f_dft
      fi
   else      # missing "${CNF}": fallback to default values
      printf "\n${_wn0} %s notFOUND\n" "${CNF##*/}"
      f_dft
   fi
}
