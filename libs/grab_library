#!/usr/bin/env bash
# TAGS
#   grab_library v9.9
#   https://github.com/ngadmini
# AUTHOR
#   ngadimin@warnet-ersa.net
# TL;DR
#   see README and LICENSE

shopt -s expand_aliases
alias _grp="LC_ALL=C grep"
alias _snc="rsync -rtxX -e 'ssh -q -T -c aes128-ctr -o Compression=no -x'"
alias _sed="LC_ALL=C sed"
alias _srt="LC_ALL=C sort --buffer-size=80% --parallel=3"
alias _ssh="ssh -q -T -c aes128-ctr -o Compression=no -x"

_foo="${0##*/}"
_fuu="${BASH_SOURCE[0]##*/}"
_prl='^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$'
_ver=$(_grp -P "^#[[:space:]]+grab_" "${_foo}" | awk -F' ' '{print $NF}')
_api="https://api.github.com/repos/ngadmini/Grabbing-Blacklist-for-Bind9-RPZ/releases/latest"
_get=$(curl -s "${_api}" | grep download_url | awk -F/ '{print $8}')
_ori="https://raw.githubusercontent.com/ngadmini/Grabbing-Blacklist-for-Bind9-RPZ/${_get}"
_lct=$(date +%a\ %Y-%m-%d\ %T\ %Z)
_gen="; generate at ${_lct} by ${_foo} ${_ver}"

# colorizing
_cyn='\e[96m'
_grn='\e[92m'
_ncl='\e[0m'
_red='\e[91m'
_ylw='\e[93m'
_ccl="${_grn}(Ctrl+C)${_ncl}"
_cnt="${_cyn}CONTINUED to :${_ncl}"
_CYN="${_cyn}%s${_ncl}"
_don="${_grn}[DONE]${_ncl}"
_err="${_red}[FAIL]${_ncl}"
_GRN="${_grn}%s${_ncl}"
_hnt="${_cyn}[HINT]${_ncl}"
_inf="${_cyn}[INFO]${_ncl}"
_pre="${_cyn}PREPARING TASKs:${_ncl}"
_RED="${_red}%s${_ncl}"
_rnr="${_grn}'rndc reload'${_ncl}"
_shd="${_grn}'shutdown -c'${_ncl}"
_tks="${_red}TASKs${_ncl}"
_wn0="${_ylw}WARNING:${_ncl}"
_wn1="${_ylw}[WARN]${_ncl}"
_YLW="${_ylw}%s${_ncl}"

f_tmp() {   # remove temporary files, directories & arrays, generated while script execution
   find . -maxdepth 1 -regex "^.*\(dmn\|prn\|sed\|tm[pq]\|txt.adulta\|txt.trust\+a\).*\|.*\(gz\|swp\)$" -print0 | xargs -r0 rm -rf
   find . -maxdepth 1 -type d ! -name "." -print0 | xargs -r0 rm -rf
   find /tmp -maxdepth 1 -type f -name "txt.*" -print0 | xargs -r0 mv -t .
}

f_set() {
   unset -v ar_{CAT,CNF,DBC,RPZ,VAR,cat,cnf,dbc,dom,dmn,dwn,exe,num,pkg,prn,reg,rpz,shn,shy,spl,tmp,txt,uri,url,zon}
   set +Eeuo pipefail
   shopt -u expand_aliases
}

f_cln() { printf "\n"; f_tmp; f_set; }
f_trp() { trap f_cln EXIT TERM; trap 'f_cln; exit 130' INT; }

f_xcd() {   # exit code {244..255}
   for EC in $1; do
      local _xcd _xcl _msj _lmm _lmn _msg _ind _lin _ext _ukn _ukm
      _xcd=$(printf "${_err} ${_foo} line ${BASH_LINENO[0]}. exit %s" "${EC}")
      _xcl=$(printf "${_err} ${_fuu} line ${BASH_LINENO[0]}. exit %s" "${EC}")
      case ${EC} in
        244) printf "\n%s: \n${_hnt} %s\n" "${_xcd}" "required passwordless ssh to remote host: '$2'"
             return 1;;
        245) printf "%s: \n${_hnt} %s\n" "${_xcd}" "required '$2' but it's not installed"
             return 1;;
        246) printf "\n%s: \n${_hnt} %s\n" "${_xcd}" "'$2' required '$3' but it's not installed"
             return 1;;
        247) printf "\n%s: \n${_hnt} %s\n" "${_xcd}" "you must execute ${_foo} as non-root privileges"
             return 1;;
        248) _msj="urls. but URLS=${URLS} stated in file ${ar_shn[0]}"
             _lmm="$(basename "$2") consist of $(wc -l < "$2")"
             printf "\n%s\n%s\n" "${_xcd}" "${_lmm} ${_msj}"
             return 1;;
        249) _msg="lines. but REGEX=${REGEX} stated in file ${ar_shn[0]}"
             _lmn="$(basename "$2") consist of $(wc -l < "$2")"
             printf "\n%s\n%s\n" "${_xcd}" "${_lmn} ${_msg}"
             return 1;;
        250) local _ref='[exit-code] section at https://curl.se/docs/manpage.html'
             local _unk='if spelling is correct, please see'
             printf "${_inf} %s: %s\n%s\n" "${_unk}" "${_ref}" "${_xcl}"
             exit 1;;
        251) printf "\n%s\n%s\n" "${_xcd}" "download failed from origin, please check spelling"
             return 1;;
        252) printf -v _ind "${_CYN}" "$(echo "${ar_num[*]}" | _grp '[aA-zZ\.,]')"
             printf "\n%s, invalid ar_num's values: %s" "${_xcd}" "${_ind}"
             printf "\n${_hnt} use numeric in ar_num's values%s\n"
             return 1;;
        253) _lin=$(grep -En "^(HOST|#HOST)" "${CNF}" | cut -d: -f1)
             _ext=$(printf "\n${_err} ${CNF##*/} at line ${_lin}. exit %s" "${EC}")
             printf "%s\n%s : if spelling is correct, maybe isDOWN\n" "${_ext}" "${HOST}"
             return 1;;
        254) printf "\n%s: ${_CYN} doesn't exis in %s\n" "${_xcl}" "$(basename "$2")" "$3"
             return 1;;
        255) printf "\n${_inf} NEED files:\n${_CYN}\n" "$2"
             return 1;;
          *) _ukn="Unknown exit code [f_xcd $1], please check"
             printf -v _ukm "%s" "${_foo} at line $(grep -n "f_xcd $1" "${_foo}" | cut -d: -f1)"
             printf "\n${_err} %s %s\n" "${_ukn}" "${_ukm}"
             return 1;;
      esac
   done
}

f_sm0() {   # display offering options
   printf "${_wn1} there are still remaining :\n"
   printf "   - duplicate entries across CATEGORIES\n"
   printf "   - sub-domains and it's parent-domain across CATEGORIES\n"
   printf "   - ipv4 that can be reduced to a CIDR-block\n"
   printf "${_hnt} consider continue to next TASKs\n"
   printf "${_CYN}\n" "you have 4 options to proceed to the next task:"
   printf "%4s) pruning ipv4, duplicate & sub-domain entries across CATEGORIES\n" "1"
   printf "%4s) option [1] and rewriting ipv4 & domain entries to RPZ format-entry [db.* files]\n" "2"
   printf "%4s) option [2] and incrementing serial zones [rpz.* files]\n" "3"
   printf "%4s) option [3] and syncronizing latest [rpz.* and db.*] files to %s\n" "4" "${HOST}"
   f_sm11
   printf "%4s) use ${_ccl} to quit\n" "^C"
   printf "please hit: ${_CYN} to continue OR ${_ccl} to quit\n" "(1|2|3|4)"
}

f_sm1() {   # f_sm[1..5]: display messages while chosing option
   printf "\n${_red}[%s'st] TASK options chosen${_ncl}\n" "${opsi}"
   printf "${_cnt}\n%4s) pruning ipv4, duplicate & sub-domain entries across CATEGORIES\n" "1"
   f_sm10 "st"
}

f_sm2() { f_sm5 "nd"; f_sm10 "nd"; }
f_sm3() {
   f_sm5 "th"
   printf "%4s) incrementing serial zones [rpz.* files]\n" "3"
   f_sm10 "th"
}

f_sm4() {
   f_sm5 "th"
   printf "%4s) incrementing serial zone-files [rpz.*]\n" "3"
   printf "%4s) syncronizing latest [rpz.* and db.*] files to '%s'\n" "4" "${HOST}"
   f_sm11
   f_sm10 "th"
}

f_sm5() {
   printf "\n${_red}[%s'%s] TASK options chosen${_ncl}\n" "${opsi}" "$1"
   printf "${_cnt}\n%4s) pruning ipv4, duplicate & sub-domain entries across CATEGORIES\n" "1"
   printf "%4s) rewriting ipv4 & domain entries to RPZ format-entry [db.* files]\n" "2"
}

f_sm6() { printf "%12s: %-66s" "grab_$1" "${2}"; }
f_sm7() { printf "\nprocessing ${_CYN} with (%d) additional sources-url(s)\n" "${1^^} CATEGORY" "$2"; }
f_sm8() { printf "%12s: %-66s" "fixing" "bads, duplicates and false entries at ${1^^}"; }
f_sm9() { printf "${_tks} based on %s'%s options: ${_GRN}\nbye!\n" "${opsi}" "$1" "DONE"; }
f_sm10() { printf "${_cyn}PERFORMING TASKs:${_ncl} based on %s'%s options ...\n" "${opsi}" "$1"; }
f_sm11() {   # f_sm[6..11]: display processing messages
   if [[ ${RNDC_RELOAD} =~ [nN][oO] ]]; then
      printf "%6s${_wn0} remote-host %s will REBOOT due to low memory\n" "" "${HOST}"
      printf "%18s ${_shd} at remote-host: %s to abort\n" "use" "${HOST}"
   else
      printf "%6s${_wn0} ${_rnr} will be executed too. press ${_ccl} to abort\n" ""
   fi
}

f_tim() {   # time elapsed in minute:second:milisecond
   local S="$((T/1000000000))"
   local MS="$((T%1000000000/1000000))"
   printf "${_don} completed IN ${_cyn}%'dm:%'ds:%'dms${_ncl}\n" "$((S/60%60))" "$((S%60))" "${MS}"
}

f_up() { printf "${_GRN}\n" "isUP"; }
f_ok() { printf "${_GRN}\n" "isOK"; }
f_do() { printf "${_GRN}\n" "DONE"; }
f_no() { printf "\n${_err} missing file(s): ${_CYN}\n" "$1"; }

# grabbing domains from sources-urls
f_add() { curl -ks --http2 --tcp-fastopen --tcp-nodelay --tr-encoding --compressed --ignore-content-length "$1" || f_xcd 251 "$1"; }
f_fix() {   # fixing false and bad entries
   f_sm8 "$1"
   dos2unix "$2" >> /dev/null 2>&1
   _srt -u "$2" | _sed -e "$3" -e "$4" > "$5"
}

f_out() {   # turn-back domains that passed filtering to trust+ category
   local _out="(bandar|bett?ing|bobet|casino|[^\-]domino|gambling|[^ey]judi|lot([0-9]{1,}|to)|poker|to(gel|to)|\.(ac|go)\.id$)"
   _grp -E "${_out}" "$1" >> "$2"
   _sed -i -E "/${_out}/d" "$1"
   f_do
}

f_fip() {   # capture ip-address entry. turn to CIDR & save it into ipv4 CATEGORY
   printf "%12s: %-66s" "moving" "IP-address entries into $3 CATEGORY"
   _grp -P "${_prl}" "$1" | _sed "/\/[0-9]\{2\}$/ ! s/$/\/32/" >> "$2"
   _sed -i -r "/^([0-9]{1,3}\.){3}[0-9]{1,3}$/d" "$1"
   f_do
   printf "%12s: %'d entries.\n" "acquired" "$(wc -l < "$1")"
}

f_uri() {   # verify remote-urls [grab_urls] is available
   ar_uri=()
   local ar_dwn=()
   local i=-1

   while read -r uri; do   # slicing url && add as an element to ${ar_uri[@]}
      local l ll _uri _stc
      ll="${uri##htt*\/\/}"
      l="${ll/\/*/}"
      _uri="${l}/..?../${uri##*/}"

      ar_uri+=("${_uri}")   # starting check
      ((i++))
      printf "%12s: %-66s" "url_${i}" "${ar_uri[i]}"
      _stc=$(curl -kso /dev/null -Iw "%{http_code}" "${uri}")
      _ret=$?

      if [[ ${_ret} =~ (0|35) ]]; then
         f_up   # ignored in case https://trustpositif.kominfo.go.id/assets/db/domains_isp
      else      #+  curl_code=35. SSL connect error. the SSL handshaking failed
          printf "${_RED}\n" "curl-code: ${_ret}"
          ar_dwn+=("[exit-code: ${_ret}] ${uri}")
      fi
   done < "$1"

   if [[ ${#ar_dwn[@]} -eq 0 ]]; then   # display result
      printf "%30s\n" " " | tr " " -
      printf "All URLs of sources-url(s) isUP.\n"
   else
      printf "%84s\n" " " | tr " " -
      printf "${_CYN}\n" "${ar_dwn[@]}"
      f_xcd 250
   fi
}

# f_dpl, f_dpm & f_dpn: used by grab_duplic.sh
f_dpl() { printf "pruning duplicate entries based on ${_CYN}\n" "${1^^}"; }
f_dpm() {
   awk 'FILENAME == ARGV[1] && FNR==NR{a[$1];next} !($1 in a)' "$1" "$2" > "$3"
   cp "${3}" "${2}"
   f_do
}

f_dpn() {
   printf "%11s = pruning duplicates %-23s" "STEP $6.$1" "$2 entries"
   _srt "$3" "$4" | uniq -d > "$5"

}

f_g4c() {   # used by grab_cereal.sh to remarking rpz.*
   if ! grep -q "^; $1" "$1";  then _sed -i "1i ; ${1}" "$1"; fi

   if ! grep -q "^; generate at" "$1"; then
      _sed -i "/; ${1}/a${_gen}" "$1"
   else
      _sed -i "s/; generate.*/${_gen}/" "$1"
   fi

#   if ! grep -q "${_ori}/zones-rpz/${1}" "$1"; then _sed -i "/${_gen}/a; ${_ori}\/zones-rpz\/${1}" "$1"; fi
   if ! grep -q "${_ori}/libs/${_foo}" "$1"; then _sed -i "/ngadmini/a; ${_ori}\/libs\/${_foo}" "$1"; fi
}

f_g4b() {   # remarking db.*
   local acq_al
   printf -v acq_al "%'d" "$(wc -l < "$1")"
   printf "%10s entries\n" "${acq_al}"
   _sed -i "1i ; ${1} = ${acq_al} lines\n${_gen}\n; ${_ori}\/libs\/${_foo}\n;" "$1"
}

f_rpz() { # f_rpz & f_ip4, both are used by grab_build.sh
   printf "%13s %-31s : " "rewriting" "$2 to $1"
   awk -v DOM="${RPZ_DOM}" '{print $0" "DOM"\n""*."$0" "DOM}' "$2" >> "$1"
   f_g4b "$@"
}

f_ip4() {
   printf "%13s %-31s : " "rewriting" "$2 to $1"
   _sed "s/\//\./" "$2" | awk -v IPV="${RPZ_IP4}" -F. '{print $5"."$4"."$3"."$2"."$1"."IPV}' >> "$1"
   f_g4b "$@"
}

f_ssh() {   # nested in f_cer and needed by grab_rsync
   printf "${_inf} %-85s" "check availability remote-host: ${HOST}"
   if ! ping -w 1 "${HOST}" >> /dev/null 2>&1; then f_xcd 253; fi
   f_up

   printf "${_inf} %-85s" "check passwordless ssh compatibility: ${HOST}"
   _ssh -o BatchMode=yes "${HOST}" true  >> /dev/null 2>&1 || f_xcd 244 "${HOST}"
   f_ok

   printf "${_inf} %-85s" "check availability: ${ZONE_DIR} in ${HOST}"
   _ssh root@"${HOST}" [[ -d "${ZONE_DIR}" ]] || f_xcd 254 "${ZONE_DIR}" "${HOST}"
   f_ok

   printf "${_inf} %-85s" "check required debian-packages in ${HOST}"
   _ssh root@"${HOST}" "hash rsync >> /dev/null 2>&1" || f_xcd 246 "${HOST}" "rsync"
   f_ok
}

f_cer() {   # used by grab_cereal.sh [grabbing zone-files if notFOUND]
   f_ssh
   for a in $1; do
      if scp root@"${HOST}":"${ZONE_DIR}"/"${a}" "${_DIR}" >> /dev/null 2>&1; then
         printf "${_inf} fetch files from %s: ${_CYN}\n" "${HOST}" "${a}"
      else
         printf "\n${_err} notFOUND in %s:\n${_CYN}\n" "${HOST}" "${a}"
         f_ori "zones-rpz/${a}" "${a}"
      fi
   done
   printf "\n${_inf} retry to forking ${_CYN}\n" "${_foo}"
   exec "$0"
}

f_ori() {
   printf "${_inf} trying to get ${_CYN} from origin:\n%s\n" "$2" "${_ori}/$1"
   local _val
   _val=$(curl -so /dev/null -I -w "%{http_code}" "${_ori}/$1")

   if [[ ${_val} -eq 200 ]]; then
      curl -s "${_ori}/$1" >> "$2" || f_xcd 251
      printf "${_inf} %-73s" "get $2 from origin"
   else
      printf "${_err} ${_CYN} notFOUND. download failed: status-code %d\n" "$2" "${_val}"
      return 1
   fi
}

f_mis() { printf "\n${_err} mismatch file(s): ${_CYN}" "$1"; f_xcd 255 "$2"; }
f_sed() { _sed "s/ /\n/g" | _srt | uniq -u | tr "\n" " " | _sed "s/ $//g"; }
f_fnd() { find . -maxdepth 1 -type f -name "$1" | _sed "s/\.\///" | _srt; }
f_frm() { find . -maxdepth 1 -type f -name "$1" -print0 | xargs -r0 rm; }
f_cat() { find . -maxdepth 1 -type d | _sed "1d;s/\.\///" | _srt; }
f_sta() { if [[ $(stat -c "%a" "$2") != "$1" ]]; then chmod "$1" "$2"; fi; }
f_pkg() { if ! [[ -e $1 ]]; then f_no "$1"; f_ori libs/"$1" "$1"; fi; f_sta "$2" "$1"; }

f_dft() {   # fallback to these default values if grab_config missing or missconfigured
   printf "\n${_wn0} ${_CYN} continued with default configurations\n" "${_foo}"
   : "${HOST:=rpz.warnet-ersa.net}"         # or ip-address
   : "${REGEX:=4}"                          # fix number of lines grab_regex
   : "${RNDC_RELOAD:=no}"                   # yes OR no
   : "${RPZ_DOM:=CNAME .}"                  # rpz policy
   : "${RPZ_IP4:=rpz-ip CNAME .}"           #+
   : "${URLS:=20}"                          # fix number of lines grab_urls
   : "${ZONE_DIR:=/etc/bind/zones-rpz}"     # target dir for rsync
}

f_cnf() {   # valuation variables in grab_config
   readonly CNF="${_DIR}"/grab_config

   if [[ -e ${CNF} ]]; then
      f_sta 644 "${CNF}"
      ar_cnf=(HOST REGEX RNDC_RELOAD RPZ_DOM RPZ_IP4 URLS ZONE_DIR)
      mapfile -t ar_CNF < <(_srt "${CNF}" | _grp -E "^[A-Z]" | _sed "s/[ ^ ]=/=/g" | cut -d= -f1)

      if [[ ${ar_CNF[*]} == "${ar_cnf[*]}" ]]; then
         local _ptr="s/=[ ^ ]/=/g;s/['\"]//g;s/[#;].*//g;s/[[:space:]]+/ /g;s/[[:space:]]$//g"
         mapfile -t ar_VAR < <(_srt "${CNF}" | _grp -E "^[A-Z]" | _sed "${_ptr}" | cut -d= -f2)
         for ARG in "${!ar_VAR[@]}"; do   # get values supplied by "${CNF}", instead of "source ${CNF}"
            printf -v "${ar_CNF[ARG]}" "%s" "${ar_VAR[ARG]}"
         done
         f_ok
      else  # misconfigurations occurs: fallback to default values
         printf "\n${_err} misconfigurations occurs in ${_CYN}. undefine variable: " "${CNF##*/}"
         printf "%s${_CYN}\n" "" "$(echo "${ar_CNF[@]}" "${ar_cnf[@]}" | f_sed)"
         printf "${_CYN} do you want continue with default configurations (Y/n)? " "[CONFIRM]"
         read -r confirm
         case ${confirm:0:1} in
            y|Y|"") f_dft;;
                 *) return 1;;
         esac
      fi
   else     # missing file: "${CNF}". fallback to default values
      f_no "${CNF##*/}"
      printf "${_CYN} do you want continue with default configurations (Y/n)? " "[CONFIRM]"
      read -r confirm
      case ${confirm:0:1} in
         y|Y|"") f_dft;;
              *) return 1;;
      esac
   fi
}

f_stt() {   # starting main script
   printf "\n${_RED}\nstarting ${0##*/} ${_ver} at ${_CYN}\n" "$1" "${_lct}"
   if [[ ${_get} != "${_ver}" ]]; then   # confirm to the latest release
      printf "${_inf} an update is available\ndo you want upgrade to ${_CYN} (Y/n)? " "${0##*/} version ${_get}"
      read -r confirm
      case ${confirm:0:1} in
         y|Y|"") curl -sO "${_ori}/libs/${0##*/}"
                 exec "$0";;
              *) return 1;;
      esac
   fi
   if ! [[ -e .shellcheckrc ]]; then     # portability to shellcheck
      cat <<eof>>.shellcheckrc
source-path=./
source=/dev/null
disable=SC2034
disable=SC2059
disable=SC2148
disable=SC2154
eof
   fi
}
