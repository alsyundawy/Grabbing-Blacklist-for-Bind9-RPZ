# TAGS
#   grab_lib
#   v6.4
# AUTHOR
#   ngadimin@warnet-ersa.net
# NOTE
#   a library of functions and fundamental values
#   intended for use by other scripts, not to be executed directly.

set -a
CI="${CI:=false}"
[[ $CI == "false" ]] || CI='true'
shopt -s expand_aliases
alias _sort="LC_ALL=C sort --buffer-size=80% --parallel=3"
alias _sed="LC_ALL=C sed"
alias _grep="LC_ALL=C grep"
alias _ssh="ssh -q -T -c aes128-ctr -o Compression=no -x"
alias _rsync="rsync -rtxX -e 'ssh -q -T -c aes128-ctr -o Compression=no -x'"

_foo=$(basename "$0")
_fuu=$(basename "${BASH_SOURCE[0]}")
_red="\e[91m"
_grn="\e[92m"
_ylw="\e[93m"
_cyn="\e[96m"
_ncl="\e[0m"
_inf="${_ylw}[INFO]${_ncl}"
_err="${_red}[FAIL]${_ncl}"
_wrn="${_grn}WARNING:${_ncl}"
_tks="${_red}TASKs${_ncl}"

readonly CONFIG="grab_cnf"
test -r "${CONFIG}" || chmod 644 "${CONFIG}"
ar_cnf=(HOST LC_NUMERIC RNDC_RELOAD RR_RH)
mapfile -t ar_CNF < <(grep -Ev "(#|^\s*$)" "${CONFIG}" | cut -d'=' -f1 | sort )

if [[ ${ar_CNF[*]} == "${ar_cnf[*]}" ]]; then
   # shellcheck source=/dev/null
   source "${CONFIG}" >> /dev/null 2>&1
else
   printf "${_err} cannot read config from %s\nall variables must be determined\n" "${CONFIG}"
   exit 1
fi

f_tmp() {   # remove temporary files, directories && arrays defined during the execution of the script
   find . -regextype posix-extended -regex "^.*(dmn|tmr|tm[pq]|txt.adulta).*|.*gz$" -print0 | xargs -0 -r rm
   find . -type d ! -name "." -print0 | xargs -0 -r rm -rf
   find /tmp -maxdepth 1 -type f -name "txt.adult" -print0 | xargs -r0 mv -t .
   }
f_uset() { unset -v ar_{cat,CAT,db,dbc,DBC,dom,dmn,miss,reg,rpz,RPZ,sho,split,tmp,txt,url,zon} isDOWN; }
f_trap() { printf "\n"; f_tmp; f_uset; exit 255; }

f_xcd() {   # exit code {7..20}
   for EC in $1; do
      local _xcd; _xcd=$(printf "${_err} $_foo: at line ${BASH_LINENO[0]}. exit code %s" "$EC")
      local _xce; _xce=$(printf "${_err} $_fuu: at line ${BASH_LINENO[0]}. exit code %s" "$EC")
      case $EC in
          7) printf "\n%s\n%s\n" "$_xcd" "require passwordless ssh to remote host: '$2'"; return 1;;
          8) printf "\n%s\n%s\n" "$_xcd" "require '$2' but it's not installed"; return 1;;
          9) printf "\n%s\n%s\n" "$_xcd" "'$2' require '$3' but it's not installed"; return 1;;
         10) printf "\n%s\n%s\n" "$_xcd" "you must execute as non-root privileges"; return 1;;
         11) _msj="urls. it's should consist of 22 urls"
             printf -v _lmm "%s" "$(basename "$2"): $(wc -l < "$2")"
             printf "\n%s\n%s %s\n" "$_xcd" "$_lmm" "$_msj"; return 1;;
         12) _msg="lines. it's should consist of 3 lines"
             printf -v _lnn "%s" "$(basename "$2"): $(wc -l < "$2")"
             printf "\n%s\n%s %s\n" "$_xcd" "$_lnn" "$_msg"; return 1;;
         13) _ref="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes"
             _unk="Check out [grab_urls]. if those url[s] are correct, please reffer to"
             printf "${_err} %s:\n\t%s\n" "$_unk" "$_ref"; return 1;;
         14) printf "\n%s\n%s\n" "$_xcd" "download failed from '$2'"; return 1;;
         15) printf "\n%s\n%s\n" "$_xcd" "category: must equal 6"; return 1;;
         16) printf -v _lin "%s" "$(grep -En "^(HOST|#HOST)" "$CONFIG" | cut -d":" -f1)"
             _ext=$(printf "\n${_err} $CONFIG : at line $_lin. Exit code: %s" "$EC")
             printf "\n%s\n%s : if this address is correct, maybe isDOWN\n" "$_ext" "$2"; return 1;;
         17) printf "\n%s\nmissing file: %s\n" "$_xcd" "$(basename "$2")"; return 1;;
         18) printf "\n%s\n%s\n" "$_xce" """$2"" doesn't exist in ""$3"""; return 1;;
         19) printf "\n%s\n%s\n" "$_xcd" "unexpected, please remove: ""$2"""; return 1;;
         20) printf "\n%s\nmissing file: %s\n" "$_xce" "$(basename "$2")"; return 1;;
          *) _ukn="Unknown exit code [f_xcd $1], please check:"
             printf -v _knw "%s" "$_foo at line $(grep -n "f_xcd $1" "$_foo" | cut -d":" -f1)"
             printf "\n${_err} %s\n%s\n" "$_ukn" "$_knw"; return 1;;
      esac
   done
   }

f_sm0() {   # display messages when getting options
   printf "\n${_cyn}CHOOSE one of the following options :${_ncl}%s\n" ""
   printf "%4s. eliminating duplicate entries between CATEGORY\n" "1"
   printf "%4s. option [1] and rewriting all CATEGORIES to RPZ format [db.* files]\n" "2"
   printf "%4s. options [1,2] and incrementing serial at zone-files [rpz.*]\n" "3"
   printf "%4s. options [1,2,3] and syncronizing latest [rpz.* and db.*] files to %s\n" "4" "$1"
   printf "%4s. quit\n" "*"
   printf "ENTER: ${_cyn}[1|2|3|4|*]${_ncl}\t\t%s" ""
   }

f_sm1() {   # display messages when 1'st option choosen
   printf "\n${_red}[%s'st] TASK options choosen${_ncl}\n" "$RETVAL"
   printf "${_cyn}CONTINUED to :${_ncl} ~eliminating duplicate entries between CATEGORY%s\n" ""
   printf "${_cyn}Performing tasks based on %s'st options ...${_ncl}\n" "$RETVAL"
   }

f_sm2() {   # display messages when 2'nd option choosen
   f_sm5
   printf "${_cyn}Performing tasks based on %s'th options ...${_ncl}\n" "$RETVAL"
   }

f_sm3() {   # display messages when 3'th option choosen
   f_sm5
   printf "%28s serial at zone-files [rpz.*]\n" "~incrementing"
   printf "${_cyn}Performing tasks based on %s'th options ...${_ncl}\n" "$RETVAL"
   }

f_sm4() {   # display messages when 4'th option choosen
   f_sm5
   printf "%28s serial zone-files [rpz.*]\n" "~incrementing"
   printf "%28s latest [rpz.* and db.*] files to %s\n" "~syncronizing" "$HOST"
   if [[ $RNDC_RELOAD =~ [nN][oO] ]]; then
       printf "%6s${_wrn} host %s will REBOOT due to low memory\n" " " "$HOST"
       printf "%18s ${_grn}'shutdown -c'${_ncl} at HOST: %s to abort" "use" "$HOST"
   fi
   printf "\n${_cyn}Performing tasks based on %s'th options ...${_ncl}\n" "$RETVAL"
   }

f_sm5() {   # nested in f_sm2 to f_sm4
   printf "\n${_red}[%s'th] TASK options choosen${_ncl}\n" "$RETVAL"
   printf "${_cyn}CONTINUED to :${_ncl} ~eliminating duplicate entries between CATEGORY%s\n" ""
   printf "%25s all CATEGORIES to RPZ format [db.* files]\n" "~rewriting"
   }

f_sm6() {   # display FINISH messages
   f_sm11 "$@"
   printf "${_wrn} there are still remaining duplicate entries between %s.\n" "CATEGORIES"
   printf "%17s continue to next TASKs.\n" "consider"
   }

# display processing messages
f_sm7() { printf "%12s: %-64s\t" "grab_$1" "${2##htt*\/\/}"; }
f_sm8() { printf "\nprocessing ${_cyn}%s CATEGORY${_ncl} with (%d) additional remote-files\n" "${1^^}" "$2"; }
f_sm9() { printf "%12s: %-64s\t" "fixing" "bads, duplicates and false entries at ${1^^}"; }
f_sm10() { printf "\n${_tks} based on %s'%s options: ${_grn}%sDONE${_ncl}\n" "$RETVAL" "$1"; }
f_sm11() { printf "\n${_inf} completed ${_cyn}IN %s:%s${_ncl}\n" "$1" "$2"; }
f_ok() { printf "${_grn}%s${_ncl}\n" "isOK"; }         # display isOK
f_do() { printf "${_grn}%s${_ncl}\n" "DONE"; }         # display DONE
f_add() { curl -C - -fs "$1" || f_xcd 14 "$1"; }       # grabbing remote-files

# fixing false positive and bad entry
f_fix() { f_sm9 "$1"; _sort -u "$2" | _sed -e "$3" -e "$4" > "$5"; f_do; }
f_ip() { # capture and throw ip-address entry to ipv4 CATEGORY, save into sub-net
   _grep -P "^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$" \
      "$1" | _sed -e "/\/[0-9]\{2\}$/ ! s/$/\/32/" >> "$2" || true
   _sed -i -E "/^([0-9]{1,3}\.){3}[0-9]{1,3}$/d" "$1"
   }

f_fip() {
   printf "%12s: %-64s\t" "moving" "IP-address entries into $3 CATEGORY"
   f_ip "$@"
   f_do
   printf "%12s: %'d entries.\n" "acquired" "$(wc -l < "$1")"
   }

f_syn() {   # passwordless ssh for backUP oldDB and rsync newDB
   if ping -w 1 "$HOST" >> /dev/null 2>&1; then   # check existance of db-files and rpz-files
      ar_DBC=(db.adultaa db.adultab db.adultac db.adultad db.adultae db.adultaf db.adultag \
         db.ipv4 db.malware db.publicite db.redirector db.trust+)
      ar_RPZ=(rpz.adultaa rpz.adultab rpz.adultac rpz.adultad rpz.adultae rpz.adultaf rpz.adultag \
         rpz.ipv4 rpz.malware rpz.publicite rpz.redirector rpz.trust+)

      mapfile -t ar_dbc < <(f_fnd "db.*")
      mapfile -t ar_rpz < <(f_fnd "rpz.*")
      printf -v miss_DBC "%s" "$(echo "${ar_DBC[@]}" "${ar_dbc[@]}" | f_sed)"
      printf -v miss_RPZ "%s" "$(echo "${ar_RPZ[@]}" "${ar_rpz[@]}" | f_sed)"

      for DBC in ${ar_DBC[*]}; do [[ -e $DBC ]] || f_xcd 20 "$miss_DBC"; done
      for RPZ in ${ar_RPZ[*]}; do [[ -e $RPZ ]] || f_xcd 20 "$miss_RPZ"; done
      [[ ${ar_dbc[*]} == "${ar_DBC[*]}" ]] || f_xcd 19 "$miss_DBC"
      [[ ${ar_rpz[*]} == "${ar_RPZ[*]}" ]] || f_xcd 19 "$miss_RPZ"

      local _remdir="/etc/bind/zones-rpz/"
      local _ts; _ts=$(date "+%Y-%m-%d");
      local _ID; _ID="/home/rpz-$_ts.tar.gz"

      _ssh -o BatchMode=yes "$HOST" true  >> /dev/null 2>&1 || f_xcd 7 "$HOST"
      _ssh root@"$HOST" [[ -d $_remdir ]] || f_xcd 18 "$_remdir" "$HOST"
      printf "\n${_inf} archiving current RPZ-dBase, save in %s:%s\n" "$HOST" "$_ID"
      _ssh root@"$HOST" "cd /etc/bind; tar -I pigz -cf $_ID zones-rpz"
      printf "${_inf} find and remove old RPZ-dBase archive in %s:/home\n" "$HOST"
      _ssh root@"$HOST" "find /home -regextype posix-extended -regex '^.*(tar.gz)$' -mmin +1430 -print0 | xargs -0 -r rm"
      printf "${_inf} syncronizing the latest RPZ-dBase to %s:%s\n" "$HOST" "$_remdir"
      _rsync {rpz,db}.* root@"$HOST":"$_remdir"

      if [[ $RNDC_RELOAD =~ [yY][eE][sS] ]]; then
         printf "Reload BIND9-server:%s\n" "$HOST"
         _ssh root@"$HOST" "rndc reload"
      else
         # $HOST" will reboot [after +@ minute] due to low memory
         printf "${_inf} host: ${_grn}%s${_ncl} scheduled for reboot at %s\n" "$HOST" "$(faketime -f "+5m" date +%H:%M:%S)"
         _ssh root@"$HOST" "shutdown -r 5 --no-wall >> /dev/null 2>&1"
         printf "${_inf} use ${_grn}'shutdown -c'${_ncl} at host: %s to abort" "$HOST"
      fi
   else
      f_xcd 16 "$HOST"
   fi
   }

f_crawl() {   # verify "URLS" isUP
   isDOWN=()
   local i=-1
   while IFS= read -r line || [[ -n $line ]]; do
      # slicing urls && add element to ${ar_sho[@]}
      local lll; lll="${line##htt*\/\/}"
      local ll; ll="$(basename "$line")"
      local l; l="${lll/\/*/}"
      local p_url; p_url="$l/..?../$ll"
      ar_sho+=("${p_url}")
      ((i++))
      printf "%12s: %-64s\t" "urls_${i}" "${ar_sho[i]}"
      local statusCode; statusCode=$(curl -C - -ks -o /dev/null -I -w "%{http_code}" "$line")

      if [[ $statusCode != 2* ]]; then
         printf "${_red}%s${_ncl}\n" "Code: $statusCode"
         isDOWN+=("[Respon Code:${statusCode}] ${line}")
      else
         printf "${_grn}%s${_ncl}\n" "isUP"
      fi

   done < "$1"

   local isDOWNCount=${#isDOWN[@]}
   if [[ $isDOWNCount -eq 0 ]]; then
      printf "%30s\n" " " | tr " " -
      printf "%s\n" "All URLS of remote-files isUP."
   else
      printf "%84s\n" " " | tr " " -
      printf "${_red}%s${_ncl}\n" "${isDOWN[@]}"
      f_xcd 13
   fi
   }

f_dupl() { printf "eliminating duplicate entries based on ${_cyn}%s${_ncl}\n" "${1^^}"; }
f_ddup() {  # used by grab_dedup.sh
   printf "%11s = deduplicating %s entries \t\t" "STEP $6.$1" "$2"
   _sort "$3" "$4" | uniq -d | _sort -u > "$5"
   }

f_g4b() {   # nested in f_rpz and f_ip4
   local _tag; _tag=$(grep -P "^#\s{2,}v.*" "$_foo" | cut -d" " -f4)
   _sed -i -e "1i ; generate at \[$(date)\] by $_foo $_tag\n;" "$1"
   printf -v acq_al "%'d" "$(wc -l < "$1")"
   printf "%10s entries\n" "$acq_al"
   }

f_g4c() {   # used by grab_cereal.sh
   local _tag; _tag=$(grep -P "^#\s{2,}v.*" "$_foo" | cut -d" " -f4)
   if [[ $(grep -n "^; generate at" "$1" | cut -d':' -f1) = 1 ]]; then
      _sed -i "1s/^.*$/; generate at \[$(date)\] by $_foo $_tag/" "$1"
   else
      _sed -i -e "1i ; generate at \[$(date)\] by $_foo $_tag" "$1"
   fi
   }

f_rpz() {   # used by grab_build.sh
   printf "%13s %-31s : " "rewriting" "$2 to $1"
   awk -v a="$RR_RH" '{print $0" IN "a"\n""*."$0" IN " a}' "$2" >> "$1"
   f_g4b "$@"
   }

f_ip4() {   # used by grab_build.sh
   printf "%13s %-31s : " "rewriting" "$2 to $1"
   _sed "s/\//\./" "$2" |\
      awk -v a="$RR_RH" -F. '{print $5"."$4"."$3"."$2"."$1".rpz-nsip"" "a}' >> "$1"
   f_g4b "$@"
   }

f_cer() {   # used by grab_cereal.sh to copy zone-files by passwordless ssh-scp
   if ping -w 1 "$HOST" >> /dev/null 2>&1; then
      local _remdir="/etc/bind/zones-rpz"
      _ssh -o BatchMode=yes "$HOST" /bin/true  >> /dev/null 2>&1 || f_xcd 7 "$HOST"
      _ssh root@"$HOST" [[ -d $_remdir ]] || f_xcd 18 "$_remdir" "$HOST"

      for a in $1; do
         if scp -qr root@"$HOST":"$_remdir"/"$a" "$_DIR"; then
            :      # do nothing
         else
            local origin="https://raw.githubusercontent.com/ngadmini/Grabbing-Blacklist-for-Bind9-RPZ/master/zones-rpz/"
            printf "\n${_inf} %s not found in %s. %s\n" "$a" "$HOST" "try to get from origin:"
            printf "%s%s\n" "$origin" "$a"
            curl -C - -fs "$origin""$a" >> "$a" || f_xcd 14 "$origin"
            printf "${_inf} successfully get %s from origin:\n%s%s\n" "$a" "$origin" "$a"
         fi
      done
      printf "\n${_inf} retrying TASK again%s" ""
      exec "$0"
   else
      f_xcd 16 "$HOST"
   fi
   }

f_rvu() {   # used by grab_http.sh
   tools="grab_dedup.sh, grab_build.sh, grab_cereal.sh and grab_scp.sh"
   printf "Nothing choosen, just stop right now\n"
   printf "You can still run:\n${_red}%s${_ncl}\nanytime after this\n" "$tools"
   }

f_sed() { _sed "s/ /\n/g" | sort | uniq -u | tr "\n" " "; }
f_pms() { find . -regextype posix-extended -regex "^.*(db|rpz).*" -not -perm 640 -exec chmod -R 640 {} \;; }
f_fnd() { find . -maxdepth 1 -type f -name "$1" | _sed -e "s/\.\///" | sort; }
f_frm() { find . -maxdepth 1 -type f -name "$1" -print0 | xargs -0 -r rm; }
f_cat() { find . -maxdepth 1 -type d | _sed -e "1d;s/\.\///" | sort; }
